/* tslint:disable */
/* eslint-disable */
/**
 * CleanArchitecture.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateToDoItemCommand,
    CreateToDoItemCommandFromJSON,
    CreateToDoItemCommandToJSON,
    ProjectDto,
    ProjectDtoFromJSON,
    ProjectDtoToJSON,
    ToDoItemDto,
    ToDoItemDtoFromJSON,
    ToDoItemDtoToJSON,
    UpdateToDoItemCommand,
    UpdateToDoItemCommandFromJSON,
    UpdateToDoItemCommandToJSON,
} from '../models';

export interface GetToDoItemRequest {
    projectId: string;
    id: string;
}

export interface ProjectsProjectIdIncompleteItemsGetRequest {
    projectId: string;
}

export interface ProjectsProjectIdItemsGetRequest {
    projectId: string;
}

export interface ProjectsProjectIdItemsIdCompletePatchRequest {
    projectId: string;
    id: string;
}

export interface ProjectsProjectIdItemsIdDeleteRequest {
    projectId: string;
    id: string;
}

export interface ProjectsProjectIdItemsIdPutRequest {
    projectId: string;
    id: string;
    updateToDoItemCommand?: UpdateToDoItemCommand;
}

export interface ProjectsProjectIdItemsPostRequest {
    projectId: string;
    createToDoItemCommand?: CreateToDoItemCommand;
}

/**
 * 
 */
export class ItemsApi extends runtime.BaseAPI {

    /**
     */
    async getToDoItemRaw(requestParameters: GetToDoItemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ToDoItemDto>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getToDoItem.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getToDoItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/Items/{id}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToDoItemDtoFromJSON(jsonValue));
    }

    /**
     */
    async getToDoItem(requestParameters: GetToDoItemRequest, initOverrides?: RequestInit): Promise<ToDoItemDto> {
        const response = await this.getToDoItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async projectsProjectIdIncompleteItemsGetRaw(requestParameters: ProjectsProjectIdIncompleteItemsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ToDoItemDto>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdIncompleteItemsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/incomplete-items`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ToDoItemDtoFromJSON));
    }

    /**
     */
    async projectsProjectIdIncompleteItemsGet(requestParameters: ProjectsProjectIdIncompleteItemsGetRequest, initOverrides?: RequestInit): Promise<Array<ToDoItemDto>> {
        const response = await this.projectsProjectIdIncompleteItemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async projectsProjectIdItemsGetRaw(requestParameters: ProjectsProjectIdItemsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ToDoItemDto>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdItemsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/Items`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ToDoItemDtoFromJSON));
    }

    /**
     */
    async projectsProjectIdItemsGet(requestParameters: ProjectsProjectIdItemsGetRequest, initOverrides?: RequestInit): Promise<Array<ToDoItemDto>> {
        const response = await this.projectsProjectIdItemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async projectsProjectIdItemsIdCompletePatchRaw(requestParameters: ProjectsProjectIdItemsIdCompletePatchRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ToDoItemDto>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdItemsIdCompletePatch.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling projectsProjectIdItemsIdCompletePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/Items/{id}/complete`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToDoItemDtoFromJSON(jsonValue));
    }

    /**
     */
    async projectsProjectIdItemsIdCompletePatch(requestParameters: ProjectsProjectIdItemsIdCompletePatchRequest, initOverrides?: RequestInit): Promise<ToDoItemDto> {
        const response = await this.projectsProjectIdItemsIdCompletePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async projectsProjectIdItemsIdDeleteRaw(requestParameters: ProjectsProjectIdItemsIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectDto>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdItemsIdDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling projectsProjectIdItemsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/Items/{id}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDtoFromJSON(jsonValue));
    }

    /**
     */
    async projectsProjectIdItemsIdDelete(requestParameters: ProjectsProjectIdItemsIdDeleteRequest, initOverrides?: RequestInit): Promise<ProjectDto> {
        const response = await this.projectsProjectIdItemsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async projectsProjectIdItemsIdPutRaw(requestParameters: ProjectsProjectIdItemsIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ToDoItemDto>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdItemsIdPut.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling projectsProjectIdItemsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/Items/{id}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateToDoItemCommandToJSON(requestParameters.updateToDoItemCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToDoItemDtoFromJSON(jsonValue));
    }

    /**
     */
    async projectsProjectIdItemsIdPut(requestParameters: ProjectsProjectIdItemsIdPutRequest, initOverrides?: RequestInit): Promise<ToDoItemDto> {
        const response = await this.projectsProjectIdItemsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async projectsProjectIdItemsPostRaw(requestParameters: ProjectsProjectIdItemsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ToDoItemDto>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdItemsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/Items`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateToDoItemCommandToJSON(requestParameters.createToDoItemCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToDoItemDtoFromJSON(jsonValue));
    }

    /**
     */
    async projectsProjectIdItemsPost(requestParameters: ProjectsProjectIdItemsPostRequest, initOverrides?: RequestInit): Promise<ToDoItemDto> {
        const response = await this.projectsProjectIdItemsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

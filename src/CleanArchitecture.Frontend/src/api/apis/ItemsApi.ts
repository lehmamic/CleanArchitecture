/* tslint:disable */
/* eslint-disable */
/**
 * CleanArchitecture.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateToDoItemCommand,
    CreateToDoItemCommandFromJSON,
    CreateToDoItemCommandToJSON,
    ProjectDto,
    ProjectDtoFromJSON,
    ProjectDtoToJSON,
    ToDoItemDto,
    ToDoItemDtoFromJSON,
    ToDoItemDtoToJSON,
    UpdateToDoItemCommand,
    UpdateToDoItemCommandFromJSON,
    UpdateToDoItemCommandToJSON,
} from '../models';

export interface ApiV1ProjectsProjectIdIncompleteItemsGetRequest {
    projectId: string;
}

export interface ApiV1ProjectsProjectIdItemsGetRequest {
    projectId: string;
}

export interface ApiV1ProjectsProjectIdItemsIdCompletePatchRequest {
    projectId: string;
    id: string;
}

export interface ApiV1ProjectsProjectIdItemsIdDeleteRequest {
    projectId: string;
    id: string;
}

export interface ApiV1ProjectsProjectIdItemsIdPutRequest {
    projectId: string;
    id: string;
    updateToDoItemCommand?: UpdateToDoItemCommand;
}

export interface ApiV1ProjectsProjectIdItemsPostRequest {
    projectId: string;
    createToDoItemCommand?: CreateToDoItemCommand;
}

export interface GetToDoItemAsyncRequest {
    projectId: string;
    id: string;
}

/**
 * 
 */
export class ItemsApi extends runtime.BaseAPI {

    /**
     */
    async apiV1ProjectsProjectIdIncompleteItemsGetRaw(requestParameters: ApiV1ProjectsProjectIdIncompleteItemsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ToDoItemDto>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling apiV1ProjectsProjectIdIncompleteItemsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectId}/incomplete-items`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ToDoItemDtoFromJSON));
    }

    /**
     */
    async apiV1ProjectsProjectIdIncompleteItemsGet(requestParameters: ApiV1ProjectsProjectIdIncompleteItemsGetRequest, initOverrides?: RequestInit): Promise<Array<ToDoItemDto>> {
        const response = await this.apiV1ProjectsProjectIdIncompleteItemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProjectsProjectIdItemsGetRaw(requestParameters: ApiV1ProjectsProjectIdItemsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ToDoItemDto>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling apiV1ProjectsProjectIdItemsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectId}/Items`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ToDoItemDtoFromJSON));
    }

    /**
     */
    async apiV1ProjectsProjectIdItemsGet(requestParameters: ApiV1ProjectsProjectIdItemsGetRequest, initOverrides?: RequestInit): Promise<Array<ToDoItemDto>> {
        const response = await this.apiV1ProjectsProjectIdItemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProjectsProjectIdItemsIdCompletePatchRaw(requestParameters: ApiV1ProjectsProjectIdItemsIdCompletePatchRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ToDoItemDto>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling apiV1ProjectsProjectIdItemsIdCompletePatch.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1ProjectsProjectIdItemsIdCompletePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectId}/Items/{id}/complete`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToDoItemDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProjectsProjectIdItemsIdCompletePatch(requestParameters: ApiV1ProjectsProjectIdItemsIdCompletePatchRequest, initOverrides?: RequestInit): Promise<ToDoItemDto> {
        const response = await this.apiV1ProjectsProjectIdItemsIdCompletePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProjectsProjectIdItemsIdDeleteRaw(requestParameters: ApiV1ProjectsProjectIdItemsIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectDto>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling apiV1ProjectsProjectIdItemsIdDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1ProjectsProjectIdItemsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectId}/Items/{id}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProjectsProjectIdItemsIdDelete(requestParameters: ApiV1ProjectsProjectIdItemsIdDeleteRequest, initOverrides?: RequestInit): Promise<ProjectDto> {
        const response = await this.apiV1ProjectsProjectIdItemsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProjectsProjectIdItemsIdPutRaw(requestParameters: ApiV1ProjectsProjectIdItemsIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ToDoItemDto>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling apiV1ProjectsProjectIdItemsIdPut.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1ProjectsProjectIdItemsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectId}/Items/{id}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateToDoItemCommandToJSON(requestParameters.updateToDoItemCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToDoItemDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProjectsProjectIdItemsIdPut(requestParameters: ApiV1ProjectsProjectIdItemsIdPutRequest, initOverrides?: RequestInit): Promise<ToDoItemDto> {
        const response = await this.apiV1ProjectsProjectIdItemsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProjectsProjectIdItemsPostRaw(requestParameters: ApiV1ProjectsProjectIdItemsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ToDoItemDto>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling apiV1ProjectsProjectIdItemsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectId}/Items`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateToDoItemCommandToJSON(requestParameters.createToDoItemCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToDoItemDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProjectsProjectIdItemsPost(requestParameters: ApiV1ProjectsProjectIdItemsPostRequest, initOverrides?: RequestInit): Promise<ToDoItemDto> {
        const response = await this.apiV1ProjectsProjectIdItemsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getToDoItemAsyncRaw(requestParameters: GetToDoItemAsyncRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ToDoItemDto>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getToDoItemAsync.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getToDoItemAsync.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectId}/Items/{id}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToDoItemDtoFromJSON(jsonValue));
    }

    /**
     */
    async getToDoItemAsync(requestParameters: GetToDoItemAsyncRequest, initOverrides?: RequestInit): Promise<ToDoItemDto> {
        const response = await this.getToDoItemAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

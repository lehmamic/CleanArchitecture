/* tslint:disable */
/* eslint-disable */
/**
 * CleanArchitecture.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateProjectCommand,
    CreateProjectCommandFromJSON,
    CreateProjectCommandToJSON,
    ProjectDto,
    ProjectDtoFromJSON,
    ProjectDtoToJSON,
    UpdateProjectCommand,
    UpdateProjectCommandFromJSON,
    UpdateProjectCommandToJSON,
} from '../models';

export interface ApiV1ProjectsIdDeleteRequest {
    id: string;
}

export interface ApiV1ProjectsIdPutRequest {
    id: string;
    updateProjectCommand?: UpdateProjectCommand;
}

export interface ApiV1ProjectsPostRequest {
    createProjectCommand?: CreateProjectCommand;
}

export interface GetProjectAsyncRequest {
    id: string;
}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI {

    /**
     */
    async apiV1ProjectsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/Projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectDtoFromJSON));
    }

    /**
     */
    async apiV1ProjectsGet(initOverrides?: RequestInit): Promise<Array<ProjectDto>> {
        const response = await this.apiV1ProjectsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProjectsIdDeleteRaw(requestParameters: ApiV1ProjectsIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1ProjectsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/Projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProjectsIdDelete(requestParameters: ApiV1ProjectsIdDeleteRequest, initOverrides?: RequestInit): Promise<ProjectDto> {
        const response = await this.apiV1ProjectsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProjectsIdPutRaw(requestParameters: ApiV1ProjectsIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1ProjectsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/Projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProjectCommandToJSON(requestParameters.updateProjectCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProjectsIdPut(requestParameters: ApiV1ProjectsIdPutRequest, initOverrides?: RequestInit): Promise<ProjectDto> {
        const response = await this.apiV1ProjectsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProjectsPostRaw(requestParameters: ApiV1ProjectsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/Projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectCommandToJSON(requestParameters.createProjectCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProjectsPost(requestParameters: ApiV1ProjectsPostRequest, initOverrides?: RequestInit): Promise<ProjectDto> {
        const response = await this.apiV1ProjectsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProjectAsyncRaw(requestParameters: GetProjectAsyncRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProjectAsync.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/Projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDtoFromJSON(jsonValue));
    }

    /**
     */
    async getProjectAsync(requestParameters: GetProjectAsyncRequest, initOverrides?: RequestInit): Promise<ProjectDto> {
        const response = await this.getProjectAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
